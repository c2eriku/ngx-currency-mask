import { ElementRef, OnInit } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { NgxCurrencyMaskService } from './ngx-currency-mask.service';
import * as i0 from "@angular/core";
export declare class NgxCurrencyMaskDirective implements ControlValueAccessor, Validator, OnInit {
    private el;
    private service;
    locale: string;
    scale: string;
    max: number | string;
    min: number | string;
    prefix: string;
    postfix: string;
    minScale: number;
    maxScale: number;
    integerScale: number;
    thousandsSeparator: string;
    decimalSeparator: string;
    private onChange;
    private onTouched;
    constructor(el: ElementRef<HTMLInputElement>, service: NgxCurrencyMaskService);
    ngOnInit(): void;
    onKeyDown(event: KeyboardEvent): void;
    onKeyPress(event: KeyboardEvent): void;
    onInput(event: InputEvent): void;
    onBlur(event: any): void;
    onCompositionEnd(event: CompositionEvent): void;
    validate(control: AbstractControl<any, any>): ValidationErrors | null;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxCurrencyMaskDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxCurrencyMaskDirective, "[currencyMask]", never, { "locale": { "alias": "locale"; "required": false; }; "scale": { "alias": "scale"; "required": false; }; "max": { "alias": "max"; "required": false; }; "min": { "alias": "min"; "required": false; }; "prefix": { "alias": "prefix"; "required": false; }; "postfix": { "alias": "postfix"; "required": false; }; }, {}, never, never, false, never>;
}
