{"version":3,"file":"ngx-currency-mask.mjs","sources":["../../../projects/ngx-currency-mask/src/lib/ngx-currency-mask.config.ts","../../../projects/ngx-currency-mask/src/lib/ngx-currency-mask.service.ts","../../../projects/ngx-currency-mask/src/lib/ngx-currency-mask.directive.ts","../../../projects/ngx-currency-mask/src/lib/ngx-currency-mask.module.ts","../../../projects/ngx-currency-mask/src/public-api.ts","../../../projects/ngx-currency-mask/src/ngx-currency-mask.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\nexport class NgxCurrencyMaskConfig {\r\n    locale!: string;\r\n    scale!: string;\r\n    align!: string;\r\n    prefix!: string;\r\n    postfix!: string;\r\n}\r\n\r\nexport const NGX_CURRENCY_MASK_CONFIG = new InjectionToken<NgxCurrencyMaskConfig>('ngxCurrencyMask.config');","import { ElementRef, Inject, Injectable, Optional } from '@angular/core';\r\nimport { NGX_CURRENCY_MASK_CONFIG, NgxCurrencyMaskConfig } from './ngx-currency-mask.config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxCurrencyMaskService {\r\n  // Configuration variable\r\n  locale: string = 'en-US';\r\n  scale: string = '1.0-0';\r\n\r\n  align: string = 'left';\r\n  prefix: string = '';\r\n  postfix: string = '';\r\n\r\n  constructor(\r\n    @Optional() @Inject(NGX_CURRENCY_MASK_CONFIG) config: NgxCurrencyMaskConfig\r\n  ) {\r\n    this.locale = config?.locale;\r\n    this.scale = config?.scale;\r\n    this.align = config?.align;\r\n    this.prefix = config?.prefix ?? '';\r\n    this.postfix = config?.postfix ?? '';\r\n  }\r\n\r\n  getSeparator(locale: string): any {\r\n    return {\r\n      thousands: Number(1000).toLocaleString(locale).replace(/\\d/g, ''),\r\n      decimal: Number(0.1).toLocaleString(locale).replace(/\\d/g, '')\r\n    }\r\n  }\r\n\r\n  toDecimalFormat(value: string, decimalSeparator: string): string {\r\n    const decimalFormat = value.replace(new RegExp(`[^0-9\\\\${decimalSeparator}\\-]`, 'g'), '')\r\n      .replace(new RegExp(`\\\\${decimalSeparator}`, 'g'), '.');\r\n    return decimalFormat;\r\n  }\r\n\r\n  truncateNumber(numStr: string, decimalSeparator: string, maxScale: number): any {\r\n    if (isNaN(Number(numStr))) { throw new Error('It\\'s not a Number!'); }\r\n    const separatorIndex = numStr.search(new RegExp(`\\\\${decimalSeparator}`, 'g'));\r\n    if (separatorIndex > -1) {\r\n      const truncateNumber = numStr.slice(0, separatorIndex + maxScale + 1);\r\n      return {\r\n        value: truncateNumber,\r\n        offset: numStr.length - truncateNumber.length\r\n      };\r\n    }\r\n\r\n    return {\r\n      value: numStr,\r\n      offset: 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the cursor position within an HTMLInputElement.\r\n   * @param {HTMLInputElement} el An input element to set the cursor position for.\r\n   * @param {number} cursorPosition The desired cursor position to set.\r\n   */\r\n  setCursorPosition(el: ElementRef<HTMLInputElement>, cursorPosition: number): void {\r\n    if (cursorPosition <= -1) {\r\n      cursorPosition = 0;\r\n    }\r\n    el.nativeElement.setSelectionRange(cursorPosition, cursorPosition);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, HostListener, Input, OnInit, forwardRef } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator } from '@angular/forms';\r\nimport { NgxCurrencyMaskService } from './ngx-currency-mask.service';\r\n\r\n@Directive({\r\n  selector: '[currencyMask]',\r\n  host: {\r\n    '[style.text-align]': 'service.textAlign',\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NgxCurrencyMaskDirective),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => NgxCurrencyMaskDirective),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class NgxCurrencyMaskDirective implements ControlValueAccessor, Validator, OnInit {\r\n  @Input() locale: string = this.service.locale;\r\n  @Input() scale: string = this.service.scale;\r\n\r\n  @Input() max!: number | string;\r\n  @Input() min!: number | string;\r\n\r\n  @Input() prefix: string = this.service.prefix;\r\n  @Input() postfix: string = this.service.postfix;\r\n\r\n  minScale: number = 0;\r\n  maxScale: number = 0;\r\n  integerScale: number = 1;\r\n\r\n  thousandsSeparator: string = ',';\r\n  decimalSeparator: string = '.';\r\n\r\n  private onChange: (value: any) => void = () => { };\r\n  private onTouched: () => void = () => { };\r\n\r\n  constructor(\r\n    private el: ElementRef<HTMLInputElement>,\r\n    private service: NgxCurrencyMaskService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.locale) {\r\n      const seperator = this.service.getSeparator(this.locale);\r\n      this.thousandsSeparator = seperator.thousands;\r\n      this.decimalSeparator = seperator.decimal;\r\n    }\r\n    if (this.scale) {\r\n      const scaleArray = this.scale.split(/[^0-9]/).map(el => Number(el));\r\n      this.integerScale = scaleArray[0];\r\n      this.minScale = scaleArray[1];\r\n      this.maxScale = scaleArray[2];\r\n    }\r\n  }\r\n\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent) {\r\n    const target: HTMLInputElement = event.target as HTMLInputElement;\r\n    const selectionStart: number = target.selectionStart as number;\r\n\r\n    if (event.key == 'Backspace') {\r\n      if (target.value[selectionStart - 1] == this.thousandsSeparator) {\r\n        this.service.setCursorPosition(this.el, selectionStart - 1);\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  @HostListener('keypress', ['$event'])\r\n  onKeyPress(event: KeyboardEvent) {\r\n    const target: HTMLInputElement = event.target as HTMLInputElement;\r\n    const selectionStart: number = target.selectionStart as number;\r\n\r\n    if (event.key == this.decimalSeparator) {\r\n      if ((target.value.match(new RegExp(`\\\\${this.decimalSeparator}`, 'g'))?.length ?? 0) > 0 || selectionStart != target.value.length) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    if (event.key.match(new RegExp(`[^0-9\\\\${this.decimalSeparator}\\-]`, 'g'))) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n\r\n  @HostListener('input', ['$event'])\r\n  onInput(event: InputEvent) {\r\n    const target: HTMLInputElement = event.target as HTMLInputElement;\r\n    let selectionIndex: number = target.selectionStart ?? target.value.length;\r\n\r\n    // Skip handling input methods that require composition\r\n    if (event.isComposing) {\r\n      return;\r\n    }\r\n\r\n    if (target.value.endsWith(this.decimalSeparator)) {\r\n      if (selectionIndex == target.value.length) {\r\n        return;\r\n      }\r\n      selectionIndex++;\r\n    }\r\n\r\n    if (target.value) {\r\n      let decimalFormat: string = this.service.toDecimalFormat(target.value, this.decimalSeparator);\r\n      const decimalPart = target.value.split(this.decimalSeparator)[1];\r\n      const decimalPlaces = decimalPart ? (decimalPart.length > this.maxScale ? this.maxScale : decimalPart.length) : 0;\r\n\r\n      const truncRtn = this.service.truncateNumber(decimalFormat, this.decimalSeparator, this.maxScale);\r\n      const decimalNumber = Number(truncRtn.value);\r\n\r\n      const currencyFormat = decimalNumber.toLocaleString(this.locale, {\r\n        minimumFractionDigits: decimalPlaces,\r\n        maximumFractionDigits: this.maxScale\r\n      });\r\n\r\n      const cursorOffset = currencyFormat.length + this.prefix?.length + this.postfix?.length - target.value.length + truncRtn.offset;\r\n      target.value = this.prefix + currencyFormat + this.postfix;\r\n      this.service.setCursorPosition(this.el, selectionIndex + cursorOffset);\r\n\r\n      this.onChange(decimalNumber);\r\n      this.onTouched();\r\n    } else {\r\n      this.onChange(undefined);\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n\r\n  @HostListener('blur', ['$event'])\r\n  onBlur(event: any) {\r\n    const target: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n    if (target.value) {\r\n      if (target.value.endsWith(this.decimalSeparator)) {\r\n        target.value = target.value.slice(0, -1);\r\n      }\r\n\r\n      let decimalFormat: string = this.service.toDecimalFormat(target.value, this.decimalSeparator);\r\n      const decimalNumber = Number(this.service.truncateNumber(decimalFormat, this.decimalSeparator, this.maxScale).value);\r\n\r\n      const currencyFormat = decimalNumber.toLocaleString(this.locale, {\r\n        minimumIntegerDigits: this.integerScale,\r\n        minimumFractionDigits: this.maxScale,\r\n        maximumFractionDigits: this.maxScale\r\n      });\r\n\r\n      target.value = this.prefix + currencyFormat + this.postfix;\r\n\r\n      this.onChange(decimalNumber);\r\n    }\r\n  }\r\n\r\n\r\n  @HostListener('compositionend', ['$event'])\r\n  onCompositionEnd(event: CompositionEvent): void {\r\n    const target: HTMLInputElement = event.target as HTMLInputElement;\r\n    const selectionStart: number = target.selectionStart ?? target.value.length;\r\n\r\n    if (target.value) {\r\n      const decimalFormat = this.service.toDecimalFormat(target.value, this.decimalSeparator);\r\n      const currencyFormat = Number(decimalFormat).toLocaleString(this.locale);\r\n\r\n      const cursorOffset = currencyFormat.length - target.value.length;\r\n      target.value = currencyFormat;\r\n      this.service.setCursorPosition(this.el, selectionStart + cursorOffset);\r\n\r\n      this.onChange(decimalFormat);\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  /* Validator */\r\n  validate(control: AbstractControl<any, any>): ValidationErrors | null {\r\n    if (this.max && this.max < control.value) {\r\n      return { max: true };\r\n    }\r\n    if (this.min && this.min > control.value) {\r\n      return { min: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n\r\n\r\n\r\n  /* ControlValueAccessor */\r\n  writeValue(value: any): void {\r\n    if (value) {\r\n      this.el.nativeElement.value =\r\n        this.prefix + Number(value).toLocaleString(this.locale, {\r\n          minimumIntegerDigits: this.integerScale,\r\n          minimumFractionDigits: this.minScale,\r\n          maximumFractionDigits: this.maxScale\r\n        }) + this.postfix;\r\n\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.el.nativeElement.disabled = isDisabled;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxCurrencyMaskDirective } from './ngx-currency-mask.directive';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxCurrencyMaskDirective\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    NgxCurrencyMaskDirective\r\n  ]\r\n})\r\nexport class NgxCurrencyMaskModule { }\r\n","/*\r\n * Public API Surface of ngx-currency-mask\r\n */\r\n\r\nexport * from './lib/ngx-currency-mask.directive';\r\nexport * from './lib/ngx-currency-mask.module';\r\nexport * from './lib/ngx-currency-mask.config';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NgxCurrencyMaskService"],"mappings":"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"}